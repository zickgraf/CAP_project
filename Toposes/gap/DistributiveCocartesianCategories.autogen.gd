# SPDX-License-Identifier: GPL-2.0-or-later
# Toposes: Elementary toposes
#
# Declarations
#
# THIS FILE IS AUTOMATICALLY GENERATED, SEE CAP_project/CAP/gap/MethodRecord.gi

#! @Chapter Cocartesian Categories

#! @Section Add-methods

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LeftCocartesianDistributivityExpanding`.
#! $F: ( a, L ) \mapsto \mathtt{LeftCocartesianDistributivityExpanding}(a, L)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddLeftCocartesianDistributivityExpanding",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddLeftCocartesianDistributivityExpanding",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddLeftCocartesianDistributivityExpanding",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddLeftCocartesianDistributivityExpanding",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LeftCocartesianDistributivityExpandingWithGivenObjects`.
#! $F: ( s, a, L, r ) \mapsto \mathtt{LeftCocartesianDistributivityExpandingWithGivenObjects}(s, a, L, r)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddLeftCocartesianDistributivityExpandingWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddLeftCocartesianDistributivityExpandingWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddLeftCocartesianDistributivityExpandingWithGivenObjects",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddLeftCocartesianDistributivityExpandingWithGivenObjects",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LeftCocartesianDistributivityFactoring`.
#! $F: ( a, L ) \mapsto \mathtt{LeftCocartesianDistributivityFactoring}(a, L)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddLeftCocartesianDistributivityFactoring",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddLeftCocartesianDistributivityFactoring",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddLeftCocartesianDistributivityFactoring",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddLeftCocartesianDistributivityFactoring",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LeftCocartesianDistributivityFactoringWithGivenObjects`.
#! $F: ( s, a, L, r ) \mapsto \mathtt{LeftCocartesianDistributivityFactoringWithGivenObjects}(s, a, L, r)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddLeftCocartesianDistributivityFactoringWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddLeftCocartesianDistributivityFactoringWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddLeftCocartesianDistributivityFactoringWithGivenObjects",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddLeftCocartesianDistributivityFactoringWithGivenObjects",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `RightCocartesianDistributivityExpanding`.
#! $F: ( L, a ) \mapsto \mathtt{RightCocartesianDistributivityExpanding}(L, a)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddRightCocartesianDistributivityExpanding",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddRightCocartesianDistributivityExpanding",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddRightCocartesianDistributivityExpanding",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddRightCocartesianDistributivityExpanding",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `RightCocartesianDistributivityExpandingWithGivenObjects`.
#! $F: ( s, L, a, r ) \mapsto \mathtt{RightCocartesianDistributivityExpandingWithGivenObjects}(s, L, a, r)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddRightCocartesianDistributivityExpandingWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddRightCocartesianDistributivityExpandingWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddRightCocartesianDistributivityExpandingWithGivenObjects",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddRightCocartesianDistributivityExpandingWithGivenObjects",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `RightCocartesianDistributivityFactoring`.
#! $F: ( L, a ) \mapsto \mathtt{RightCocartesianDistributivityFactoring}(L, a)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddRightCocartesianDistributivityFactoring",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddRightCocartesianDistributivityFactoring",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddRightCocartesianDistributivityFactoring",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddRightCocartesianDistributivityFactoring",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `RightCocartesianDistributivityFactoringWithGivenObjects`.
#! $F: ( s, L, a, r ) \mapsto \mathtt{RightCocartesianDistributivityFactoringWithGivenObjects}(s, L, a, r)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddRightCocartesianDistributivityFactoringWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddRightCocartesianDistributivityFactoringWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddRightCocartesianDistributivityFactoringWithGivenObjects",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddRightCocartesianDistributivityFactoringWithGivenObjects",
                  [ IsCapCategory, IsList ] );
