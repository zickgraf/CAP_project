# SPDX-License-Identifier: GPL-2.0-or-later
# Toposes: Elementary toposes
#
# Declarations
#
# THIS FILE IS AUTOMATICALLY GENERATED, SEE CAP_project/CAP/gap/MethodRecord.gi

#! @Chapter Cartesian Categories

#! @Section Add-methods

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianAssociatorLeftToRight`.
#! $F: ( a, b, c ) \mapsto \mathtt{CartesianAssociatorLeftToRight}(a, b, c)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddCartesianAssociatorLeftToRight",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddCartesianAssociatorLeftToRight",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddCartesianAssociatorLeftToRight",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddCartesianAssociatorLeftToRight",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianAssociatorLeftToRightWithGivenDirectProducts`.
#! $F: ( s, a, b, c, r ) \mapsto \mathtt{CartesianAssociatorLeftToRightWithGivenDirectProducts}(s, a, b, c, r)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddCartesianAssociatorLeftToRightWithGivenDirectProducts",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddCartesianAssociatorLeftToRightWithGivenDirectProducts",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddCartesianAssociatorLeftToRightWithGivenDirectProducts",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddCartesianAssociatorLeftToRightWithGivenDirectProducts",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianAssociatorRightToLeft`.
#! $F: ( a, b, c ) \mapsto \mathtt{CartesianAssociatorRightToLeft}(a, b, c)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddCartesianAssociatorRightToLeft",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddCartesianAssociatorRightToLeft",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddCartesianAssociatorRightToLeft",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddCartesianAssociatorRightToLeft",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianAssociatorRightToLeftWithGivenDirectProducts`.
#! $F: ( s, a, b, c, r ) \mapsto \mathtt{CartesianAssociatorRightToLeftWithGivenDirectProducts}(s, a, b, c, r)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddCartesianAssociatorRightToLeftWithGivenDirectProducts",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddCartesianAssociatorRightToLeftWithGivenDirectProducts",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddCartesianAssociatorRightToLeftWithGivenDirectProducts",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddCartesianAssociatorRightToLeftWithGivenDirectProducts",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianLeftUnitor`.
#! $F: ( a ) \mapsto \mathtt{CartesianLeftUnitor}(a)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddCartesianLeftUnitor",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddCartesianLeftUnitor",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddCartesianLeftUnitor",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddCartesianLeftUnitor",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianLeftUnitorInverse`.
#! $F: ( a ) \mapsto \mathtt{CartesianLeftUnitorInverse}(a)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddCartesianLeftUnitorInverse",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddCartesianLeftUnitorInverse",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddCartesianLeftUnitorInverse",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddCartesianLeftUnitorInverse",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianLeftUnitorInverseWithGivenDirectProduct`.
#! $F: ( a, r ) \mapsto \mathtt{CartesianLeftUnitorInverseWithGivenDirectProduct}(a, r)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddCartesianLeftUnitorInverseWithGivenDirectProduct",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddCartesianLeftUnitorInverseWithGivenDirectProduct",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddCartesianLeftUnitorInverseWithGivenDirectProduct",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddCartesianLeftUnitorInverseWithGivenDirectProduct",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianLeftUnitorWithGivenDirectProduct`.
#! $F: ( a, s ) \mapsto \mathtt{CartesianLeftUnitorWithGivenDirectProduct}(a, s)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddCartesianLeftUnitorWithGivenDirectProduct",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddCartesianLeftUnitorWithGivenDirectProduct",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddCartesianLeftUnitorWithGivenDirectProduct",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddCartesianLeftUnitorWithGivenDirectProduct",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianRightUnitor`.
#! $F: ( a ) \mapsto \mathtt{CartesianRightUnitor}(a)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddCartesianRightUnitor",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddCartesianRightUnitor",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddCartesianRightUnitor",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddCartesianRightUnitor",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianRightUnitorInverse`.
#! $F: ( a ) \mapsto \mathtt{CartesianRightUnitorInverse}(a)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddCartesianRightUnitorInverse",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddCartesianRightUnitorInverse",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddCartesianRightUnitorInverse",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddCartesianRightUnitorInverse",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianRightUnitorInverseWithGivenDirectProduct`.
#! $F: ( a, r ) \mapsto \mathtt{CartesianRightUnitorInverseWithGivenDirectProduct}(a, r)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddCartesianRightUnitorInverseWithGivenDirectProduct",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddCartesianRightUnitorInverseWithGivenDirectProduct",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddCartesianRightUnitorInverseWithGivenDirectProduct",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddCartesianRightUnitorInverseWithGivenDirectProduct",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianRightUnitorWithGivenDirectProduct`.
#! $F: ( a, s ) \mapsto \mathtt{CartesianRightUnitorWithGivenDirectProduct}(a, s)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddCartesianRightUnitorWithGivenDirectProduct",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddCartesianRightUnitorWithGivenDirectProduct",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddCartesianRightUnitorWithGivenDirectProduct",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddCartesianRightUnitorWithGivenDirectProduct",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `DirectProductOnMorphisms`.
#! $F: ( alpha, beta ) \mapsto \mathtt{DirectProductOnMorphisms}(alpha, beta)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddDirectProductOnMorphisms",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddDirectProductOnMorphisms",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddDirectProductOnMorphisms",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddDirectProductOnMorphisms",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `DirectProductOnMorphismsWithGivenDirectProducts`.
#! $F: ( s, alpha, beta, r ) \mapsto \mathtt{DirectProductOnMorphismsWithGivenDirectProducts}(s, alpha, beta, r)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddDirectProductOnMorphismsWithGivenDirectProducts",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddDirectProductOnMorphismsWithGivenDirectProducts",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddDirectProductOnMorphismsWithGivenDirectProducts",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddDirectProductOnMorphismsWithGivenDirectProducts",
                  [ IsCapCategory, IsList ] );
