@Chapter Add Functions

This section describes the overall structure of Add-functions and the functions installed by them.

@Section Functions Installed by Add

Add functions (up to some exceptions) have the following syntax

DeclareOperation( "AddSomeFunc",
                  [ IsCapCategory, IsList, IsInt ] );

The first argument is the category to which some function (e.g. KernelObject)
is added, the second is a list containing pairs of functions and additional
filters for the arguments, (e.g. if one argument is a morphism, an additional filter could be IsMomomorphism).
The third is a weight which will then be the weight for SomeFunc. This is described later.
If only one function is to be installed, the list can be replaced by the function.
Via InstallMethod, CAP installs the given function(s) as methods for the install name of SomeFunc,
as listed in the MethodRecord. If no install name is given, the name SomeFunc is used.

All installed methods follow the following steps, described below:
* Redirect function
* Prefunction
* Function
* Logic
* Postfunction
* Addfunction

Every other part, except from function, does only depend on the name SomeFunc. We now explain the steps in detail.

* Redirect function: The redirect is used to redirect the computation from the given functions to some other symbol.
  If there is for example a with given method for some universal property, and the universal object is already computed,
  the redirect function might detect such a thing, calls the with given operation with the universal object as additional
  argument and then returns the value. In general, the redirect can be an arbitrary function. It is called with the same
  arguments as the operation SomeFunc itself and can return an array containing [ true, something ], which will cause
  the installed method to simply return the object something, or [ false ]. If the output is false, the computation will
  continue with the step Prefunction. Additionally, for every category and every name like SomeFunc, there is a boolean,
  stored in the categorys redirects component under the name of SomeFunc, which, when it is false, will prevent the
  redirect function from being executed.

* Prefunction: The prefunction should be used for error handling and soft checks of the sanity of the input to SomeFunc
  (e.g. for KernelLift it should check wether range and source of the morphims coincide). Generally, the prefunction is defined
  in the method record and only depend on the name SomeFunc. It is called with the same input as the function itself, and
  should return either [ true ], which continues the computation, or [ false, "message" ], which will cause an error with
  message "message" and some additional information.

* Full prefunction: The full prefuction has the same semantics as the prefunction, but can perform additional, very
  costly checks. They are disabled by default.

* Function: This will launch the function(s) given as arguments. The result should be as specified in the type of
  SomeFunc. The resulting object is now named the result.

* Logic: For every function, some logical todos can be implemented in a logic texfile for the category. If there is
  some logic written down in a file belonging to the category, or belonging to some type of category. Please see the
  description of logic for more details. If there is some logic and some predicate relations for the function SomeFunc,
  it is installed in this step for the result.

* Postfunction: The postfunction called with the arguments of the function and the result. It can be an arbitrary function doing
  some cosmetics. If for example SomeFunc is KernelEmbedding, it will set the KernelObject of the input morphism to result.
  The postfunction is also taken from the method record and does only depend on the name SomeFunc.

* Addfunction: If the result is a category cell, it is added to the category for which the function was installed.

@Section Add Method

Except from installing a new method for the name SomeFunc, an Add method does slightly more.
Every Add method has the same structure. The steps in the Add method are as follows:

* Weight check: If the current weight of the operation is lower than the given weight of the new functions,
                then the add function returns and installs nothing.

* Option check: There are two possible options for every add method: SetPrimitive and IsDerivation.
  * SetPrimitive should be a boolean, the default is true. If SetPrimitive is false, then the
    current call of this add will not set the installed function to be primitive. This is used for derivations.
  * IsDerivation should be a boolean, default is false. If it is true, the add method assumes that the given
    function is a derivation and does not try to install a corresponding pair (See below).

* Standard weight: If the weight parameter is -1, the Standard weight is assumed, which is 100.

* Checking for pairs: If the function is not a with given operation, has a corresponding with given or is a with given,
                      and is newly installed, i.e. the current installation weight which is given to the add function
                      is less than the current weight, the add method is going to install a corresponding pair function,
                      i.e. a function for the corresponding with or without given method, which redirects to the currently
                      installed functions. It also deactivates the redirect for this function.
                      Note that the pair install is only done for primitive functions, and if the current weight is
                      higher than the given weight.

* Can compute: Set the corresponding can compute of the category to true

* Install methods: Decide on the methods used to install the function. Check wether InstallMethodWithCache, InstallMethodWithToDoForIsWellDefined,
                   both, or simply InstallMethod is used. This is decided by the ToDo and the caching flags.

* Installation: Next, the method to install the functions is created. It creates the correct filter list, by merging the standard filters
                for the operation with the particular filters for the given functions, then installs the method as described above.

* SetPrimitive: If the set primitive flag is true, it is set as primitive in the weight list of the category.

* Pair install: If there is a function pair, as described above, it is installed.

After calling an add method, the corresponding Operation is available in the category. Also, some derivations, which are triggered by the setting
of the primitive value, might be available.


@Section InstallAdd Function

Almost all Add methods in the CAP kernel are installed by the CapInternalInstallAdd operation.
The definition of this function is as follows:

DeclareOperation( "CapInternalInstallAdd",
                  [ IsRecord ] );

The record can have the following components, used as described:

* function_name: The name of the function. This does not have to coincide with the installation name. It is used for the derivation weight.

* installation_name (optional): A string which is the name of the operation for which the
                                functions given to the Add method are installed as methods.

* pre_function (optional): A function which is used as the prefunction of the installed methods, as described above.

* redirect_function (optional): A function which is used as the redirect function of the installed methods, as described above.

* post_function (optional): A function which is used as the postfunction of the installed methods, as described above.

* filter_list: A list containing the basic filters for the methods installed by the add methods. Possible entries are filters, or
               the following strings, which will be replaced by appropriate filters at the time the add method is called.
               Additionally, an entry can be a list consisting of filters and/or the given strings, which will then be joined via `and` to form a single filter.
               * <C>category</C>,
               * <C>cell</C>,
               * <C>object</C>,
               * <C>morphism</C>,
               * <C>twocell</C>,
               * <C>other_category</C>,
               * <C>other_cell</C>,
               * <C>other_object</C>,
               * <C>other_morphism</C>,
               * <C>other_twocell</C>,
               * <C>list_of_objects</C>,
               * <C>list_of_morphisms</C>,
               * <C>list_of_twocells</C>.

* well_defined_todo (optional): A boolean, default value is true, which states wether there should be to do list entries
                                which propagate well definedness from the input of the installed methods to their output.
                                Please note that true only makes sense if at least one argument and the output of the
                                installed method is a cell.

* cache_name (optional): The name of the cache which is used for the installed methods. If no cache name is given, the caching
                         for the operation is deactivated completely.

* return_type: The return type can either be a filter or one of the strings in the list below.
               For objects, morphisms and $2$-cells the correct <C>Add</C> function (see above) is
               used for the result of the computation. Otherwise, no <C>Add</C> function is used after all.
@InsertCode CAP_INTERNAL_VALID_RETURN_TYPES

* is_with_given: Boolean, marks whether the function which is to be installed is a with given function or not.

* with_given_without_given_name_pair (optional): If the currently installed operation has a corresponding with given operation or
                                                 is the with given of another operation, the names of both should be in this list.

* functorial (optional): If an object has a corresponding functorial function, e.g., KernelObject and KernelObjectFunctorial,
                         the name of the functorial is stored as a string.

* number_of_diagram_arguments: Specifies how many of the arguments (counting from the first argument) of the function specify the diagram of the universal object.

* dual_arguments_reversed: Boolean, marks whether for the call of the dual operation all arguments have to be given in reversed order.

* dual_preprocessor_func: let f be an operation with dual operation g. For the automatic installation of g from f, the arguments given to g are preprocessed by this given function.

* dual_postprocessor_func: let f be an operation with dual operation g. For the automatic installation of g from f, the computed value of f is postprocessed by the given function.

* zero_arguments_for_add_method: the add method of this operation should get a function without arguments

Using all those entries, the operation CapInternalInstallAdd installs add methods as described above. It first provides a
sanity check for all the entries described, then installs the Add method in 4 ways, with list or functions as second argument, and
with an optional third parameter for the weight.


@Section Enhancing the method name record

The function CAP_INTERNAL_ENHANCE_NAME_RECORD can be applied to a method name record to make the following enhancements:

* Cache check: If there is no cache_name, set it to the installation_name.

* Function name: Set the component function_name to the entry name.

* WithGiven special case: If the current entry belongs to a WithGiven operation or its without given pair, the with_given_without_given_name_pair is set.
                          Additionally, the with given flag of the WithGiven operation is set to true.

* Redirect and post functions are created for all operations belonging to universal constructions (e.g. KernelLift) which are not a WithGiven operation.


@Section Install All Adds

The function CAP_INTERNAL_INSTALL_ALL_ADDS does not take any arguments. It is an auxiliary function which first applies CAP_INTERNAL_ENHANCE_NAME_RECORD to
CAP_INTERNAL_METHOD_NAME_RECORD. Afterwards it iterates over CAP_INTERNAL_METHOD_NAME_RECORD and calls the CapInternalInstallAdd with the corresponding method record entry
except if the no_install component of the record is set to true.
